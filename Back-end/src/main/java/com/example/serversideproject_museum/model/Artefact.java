package com.example.serversideproject_museum.model;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;
import java.time.LocalDate;

/*

UML diagram: Artefacts
 +------------------------+
 |       Artefact         |
 +------------------------+
 |   id       :  Long     |
 |   name     :  String   |
 |   creator  :  String   |
 |   date     :  Date     |
 |   country  :  String   |
 |   exhibits : Exhibit   |
 +------------------------+
 |   Constructors         |
 |   Getters & Setters    |
 +------------------------+

 */
@Entity
@Table(name = "artefacts")
public class Artefact {

    //   Artefact properties

    // Primary key - Long - id -- Autogenerated by Spring, initial value of 101 as we have created 100 artefacts in data.sql
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "Artefact_sequence")
    @SequenceGenerator(name = "Artefact_sequence", allocationSize = 1, initialValue = 101) //Increment of 1, initial value 101
    @Column
    private Long id;

    // String - name - Name of the artefact
 
    @Column
    private String name;

    // String - creator - Creator of the artefact
 
    @Column
    private String creator;

    // Date - date - Date the artefact was created/discovered
 
    @Column
    private LocalDate date;

    // String - country - Country of origin of the artefact

    @Enumerated(EnumType.STRING)
    @Column
    private Country country;

    /* Exhibit - exhibits - Exhibit containing the given artefact object
    *                     - Many-To-One relationship with Exhibit, joined by its artefacts property
    *                     - not nullable, an artefact must be contained in an exhibit
    *
    * Relationship - Many artefacts can be contained within one exhibit
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "exhibit_id")
    private Exhibit exhibits;


    //   Constructors

    // Standard Constructor
 
    // do not include id because it is autogenerated
    public Artefact(String name, String creator, LocalDate date, Country country) {
        this.name = name;
        this.creator = creator;
        this.date = date;
        this.country = country;
    }

    // No arg constructor- used
    public Artefact() {
    }


    //   Getters & Setters

    // Note - we don't need getter/setter for id as this is created for us and should never be changed

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    // For name property:
 
 
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    // For creator property:
 
    public String getCreator() {
        return creator;
    }
    public void setCreator(String creator) {
        this.creator = creator;
    }

    // For date property:
 
    public LocalDate getDate() {
        return date;
    }
    public void setDate(LocalDate date) {
        this.date = date;
    }

    // For country property:

    public Country getCountry() {
        return country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }


    // For exhibits property:
 
    public Exhibit getExhibits() {
        return exhibits;
    }
    public void setExhibits(Exhibit exhibits) {
        this.exhibits = exhibits;
    }

}
